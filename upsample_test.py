import caffe
import sys
import os
import skimage

import full_image_classify as minc_utils
import classify_resized as resize
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from scipy import misc
import numpy as np
import matplotlib.image as mpimg
from datetime import datetime


SCALES = [1.0/np.sqrt(2), 1.0, np.sqrt(2)]  # Define scales as per MINC paper

def upsample(im_path):
    """
    Function for performing upscaling of probability maps generated by MINC model
    :return: scaled, upsampled and averaged probability maps for all classes
    """

    # Must load images with this method!
    im = caffe.io.load_image(im_path)
    resized_images = resize.get_resized_images(im)  # perform image resizing
    outputs = [minc_utils.classify(image) for image in resized_images]  # Perform classification on images
    prob_maps = [minc_utils.get_probability_maps(out) for out in outputs]  # Get probability maps for each class for each image

    # Upsampling probability maps to be same dimensions as original image
    upsampled_prob_maps = np.array([[skimage.transform.resize(prob_map,
                                                                  output_shape=(im.shape[0], im.shape[1]),
                                                                  mode='constant',
                                                                  cval=0,
                                                                  preserve_range=True)
                                         for prob_map in prob_maps_single_image]
                                        for prob_maps_single_image in prob_maps])

    # Probability maps for each class, averaged from resized images probability maps
    averaged_prob_maps = np.average(upsampled_prob_maps, axis=0)

    return averaged_prob_maps


def plot_simple(im, data):
    """
    Function to plot the input image and data side by side.
    :param im: input image
    :param data: a result from classification
    :return:
    """

    fig, axs = plt.subplots(ncols=2, figsize=(30, 10))
    fig.subplots_adjust(hspace=0.5, left=0.07, right=0.93)
    ax = axs[0]
    hb = ax.imshow(mpimg.imread(im))
    ax.set_title("Input image")

    ax = axs[1]
    hb = ax.imshow(data)
    ax.set_title("data/result")
    cb = fig.colorbar(hb, ax=ax)

    plt.show()


if __name__ == "__main__":
    caffe.set_mode_gpu()
    image_path = sys.argv[1]  # path to image to be segmented
    av_prob_maps = upsample(image_path)

    confidence_map = av_prob_maps.max(axis=0)
    plot_simple(image_path, confidence_map)




